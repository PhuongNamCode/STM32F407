#include <stdint.h>
#define PERIPH_BASE         (0x40000000UL)
#define AHB1PERIPH_OFFSET   (0x00020000UL)

#define AHB1PERIPH_BASE     (PERIPH_BASE + AHB1PERIPH_OFFSET)
#define GPIOA_OFFSET  		(0x0000U)
#define GPIOA_BASE 			(AHB1PERIPH_OFFSET+GPIOA_OFFSET)
#define RCC_OFFSET          (0x3800UL)
#define RCC_BASE  			(PERIPH_BASE + RCC_OFFSET)
#define AHB1EN_OFFSET       (0x30UL)
#define RCC_AHB1EN_R		 (*(volatile unsigned int *)(RCC_BASE+AHB1EN_OFFSET))

#define MODE_R_OFFSET       (0x00UL)
#define GPIOA_MODE_R        (*(volatile unsigned int *)(GPIOA_BASE+MODE_R_OFFSET))

#define OD_R_OFFSET         (0x14UL)
#define GPIOA_OD_R 			(*(volatile unsigned int *)(GPIOA_BASE+OD_R_OFFSET))
#define GPIOAEN 			(1U<<0)// 0b 0000 0000 0000 0001 Add bit 1 to position 0
#define PIN5 				(1U<<5)
#define LED_PIN 			PIN5

#define __IO volatile
typedef struct {
    volatile uint32_t MODER;
    volatile uint32_t OTYPER;
    volatile uint32_t OSPEEDR;
    volatile uint32_t PUPDR;
    volatile uint32_t IDR;
    volatile uint32_t ODR;
    volatile uint32_t BSRR;
    volatile uint32_t LCKR;
    volatile uint32_t AFR[2];  
}GPIO_TypeDef;

typedef struct {
    volatile uint32_t DUMMY [12];
    volatile uint32_t AHB1ENR;

} RCC_TypeDef;
#define RCC  ((RCC_TypeDef*)RCC_BASE) 
#define GPIOA ((GPIO_TypeDef*)GPIOA_BASE)


int main(void){
    
       //1.Enable clock  to access 
      //  RCC_AHB1EN_R |=  GPIOAEN;
      RCC->AHB1ENR |= GPIOAEN;
       //2. Set PA5 to out put pin
      GPIOA->MODER |=  (1U<<10);
      
      GPIOA->MODER &=~(1U<<11);

      while(1){
        GPIOA->ODR ^= LED_PIN;
        for (int i = 0; i < 100000; i++){}
          
      }
}


